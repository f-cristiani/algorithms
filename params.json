{"name":"Algorithms","tagline":"Algorithms implementation in Java","body":"# algorithms\r\nAlgorithms implementation in Java. Developed using TDD and Refactoring techniques.\r\n\r\n* Counting Inversions\r\n* Sorting: Implemented using a common Sort interface. Template Method pattern [GOF] used in the tests.\r\n  * MergeSort\r\n  * QuickSort\r\n* Randomized Selection: O(n) algorithm to find the kth order statistic (kth smallest number) of an array, using an uniformly distributed random pivot.\r\n* Strongly Connected Components: Implementation of Kosaraju's Two-Pass Algorithm for computing Strongly Connected Components of a Graph with 'n' vertices and 'm' edges in O(n + m) time.\r\n  * Template Method pattern for implementation of reverse and direct GraphWalkers.\r\n  * Constructor Injection for providing the corresponding GraphWalker.\r\n* ShortestPath: Implementation of Dijkstra's shortest-path algorithm from a source vertex to all other vertices in the graph.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}